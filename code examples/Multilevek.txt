package open;



import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.JOptionPane;




public class MultiLevel {
	
	public static int [][] matx;
	public static int [][] lists;
	public static ArrayList<int []> ll = new ArrayList<int []>();
	public static ArrayList<Integer> degree = new ArrayList<Integer>();
	public static int [][] lists1;
	public static int [][] lists2;
	public static int numVertices [];
	private static double force_x[];
	private static double force_y[];
	private static boolean ev = true;
	public static int level=1;
	
	public static boolean [][] mat;
	public static int [][] mat1;
	private static ArrayList<String> Alists = new ArrayList<String>();
	private static int com=0;
	private static double hypotenuse=0;
	private static double energy0=10E100;
	private static double energy1=0;
	private static double k=0;
	private static double popu=0;
	private static boolean [][] sh2;
	private static double c = 0.5;
	private static double progress=0; 
	private static double int_pr=0; 
	
	private static double x_cent=0;
	private static double y_cent=0;
	
	public static int[] degree_met;
	public static double force=0;
	public static double tol=0;
	public static double deg_met=0;
	public static long main_run_time=0;
	public static ArrayList<int []> seen_links = new ArrayList<int []> ();
	public static double ch1 = 2;
	public static double ch2 = 10;
	
	
	/*public static boolean read_input  (String filename) throws FileNotFoundException
	{
		File aFile = new File(filename);
		Scanner in = new Scanner (aFile);
		Alists.clear();
		ArrayList <String> lines = new ArrayList <String>();
		
		lines.clear();
		
		while(in.hasNextLine())
		{
			String line = in.nextLine();
			lines.add(line);
		}
		variables.v=lines.size();
		variables.node_degree= new int [variables.v];
		degree_met = new int [variables.v];
		mat= new boolean[variables.v][variables.v];
		
		boolean adj= true;
		
		if(lines.get(lines.size()-1).equals("-1"))
			adj=false;
		
		variables.links=0;
		
		if(adj)
		{
			for(int i=0;i<(lines.size());i++)
			{
				String [] line = lines.get(i).split(" ");
				if(line.length!=lines.size())
				{
					JOptionPane.showMessageDialog(null, "Matrix is wrong  ... !");
					break;
				}
				
				String [] line_deg = (lines.get(i)+" ").split("1");
				variables.node_degree[i]=line_deg.length-1;
				degree_met = variables.node_degree.clone();
				for(int j=i+1;j<(lines.size());j++)
				{
					if(line[j].equals("1"))
					{
						Alists.add(""+i+"-"+j);
						variables.links++;
						mat[i][j]=true;
					}
					else
						mat[i][j]=false;
				}
			}
			
			lists = new int [2][(int) variables.links];
			if(variables.links % 2==0)
			{
				lists1 = new int [2][(int) variables.links/2];
				lists2 = new int [2][(int) variables.links/2];
				ev=true;
			}
			else
			{
				lists1 = new int [2][(int) variables.links/2];
				lists2 = new int [2][(int) variables.links/2+1];
				ev=false;
			}
			for(int i=0;i<Alists.size();i++)
			{
				String temp [] =  Alists.get(i).split("-");
				lists[0][i]= Integer.parseInt(temp[0]);
				lists[1][i]= Integer.parseInt(temp[1]);
				//************
				if(i<(int)variables.links/2)
				{
					lists1[0][i]=Integer.parseInt(temp[0]);
					lists1[1][i]=Integer.parseInt(temp[1]);
				}
				else
				{
					lists2[0][i-(int)variables.links/2]=Integer.parseInt(temp[0]);
					lists2[1][i-(int)variables.links/2]=Integer.parseInt(temp[1]);
				}
				
			}			
		}
		return true;
	}
	*/
	
	public static boolean read_input  (String filename) throws FileNotFoundException
	{
		long start_time=System.nanoTime();
		File aFile = new File(filename);
		Scanner in = new Scanner (aFile);
		variables.links=0;
		
		File gFile = new File("Graphvix.txt");
		PrintWriter out = new PrintWriter (gFile);
		out.println("graph g");
		out.println("{");
		
		int max =0;
		
		
		while(in.hasNextLine())
		{
			int [] temp = new int [2];
			String[] tem = in.nextLine().split(" -- ");
			temp [0] = Integer.parseInt(tem[0]);
			temp [1] = Integer.parseInt(tem[1]);
			if(temp[0]!=temp[1])
			{
				
				if(temp[0]>max)
					max=temp[0];
				
				if(temp[1]>max)
					max=temp[1];
				
				out.println(temp[0]+" -- "+temp[1]);
				
				variables.links++;
				ll.add(temp);
			}
		}
		out.println("}");
		out.close();
		
		variables.v = max+1;
		lists = new int [2] [(int) variables.links];
		          		
		degree_met = new int [variables.v];
		for(int i=0;i<variables.links;i++)
		{
			degree_met[ll.get(i)[0]]++;
			degree_met[ll.get(i)[1]]++;
			lists[0][i]=ll.get(i)[0];
			lists[1][i]=ll.get(i)[1];
		}
		/*for(int i=0;i<variables.v;i++)
		{
			if(degree_met[i]==1)
				System.out.println("1: "+(i+1));
			if(degree_met[i]==0)
				System.out.println("0: "+(i+1));			
		}*/
		
		
		
		//deg_met = variables.v/(variables.links/2);
		long end_time=System.nanoTime();
		main_run_time  = (end_time-start_time); 
		//deg_met=4;
		System.out.println("read run time: " +  main_run_time+" "+deg_met);
		System.out.println("No.numVertices:  " + variables.v+"  No.edges:  "+variables.links);
		in.close();
		return true;
	}
	
		
	/*public static boolean read_input1 (String filename) throws FileNotFoundException
	{
		File aFile = new File(filename);
		Scanner in = new Scanner (aFile);
	
		ArrayList <String> lines = new ArrayList <String>();
		
		lines.clear();
		int max=0;
		while(in.hasNextLine())
		{
			String line = in.nextLine();
			String [] temp = line.split(" ");
			
			if(Integer.parseInt(temp[0])>max)
				max=Integer.parseInt(temp[0]);
			if(Integer.parseInt(temp[1])>max)
				max=Integer.parseInt(temp[1]);
			
			if(!temp[0].equals(temp[1]))
				lines.add(line);
		}
		variables.v=max;
		lists = new int [2][lines.size()];
		variables.node_degree= new int [variables.v];
		mat1 = new int [variables.v][variables.v];
		
			
		variables.links=lines.size();
		System.out.println("Size:  "+variables.v+"  links:  "+variables.links);
		for(int i=0;i<lines.size();i++)
		{
			String [] temp = lines.get(i).split(" ");
		
			lists[0][i]= Integer.parseInt(temp[0])-1;
			lists[1][i]= Integer.parseInt(temp[1])-1;
		
			mat1[lists[0][i]][lists[1][i]]=1;
			mat1[lists[1][i]][lists[0][i]]=1;
			
			variables.node_degree[lists[0][i]]++;
			variables.node_degree[lists[1][i]]++;
		}
		in.close();
	
		
		return true;
	}
	*/
		
	public static boolean [][] shortest2(boolean [][] mat, int v)
	{
		boolean [][] sh = new boolean [v][v];
		
		for(int i=0;i<v;i++)
		{
			for(int j=0;j<v;j++)
			{
				if(mat[i][j])
				{
					for(int q=j+1;q<v;q++)
					{
						if(mat[i][q] && !mat[j][q])
							sh[j][q]=true;
					}
				}
				
			}
		}
		return sh;
	}
	
	
	public static void initing_parallel()
	{
		variables.pos = new double [2][variables.v];
		variables.running_time=0;
		//degree_met=variables.node_degree.clone();
	}

		
	static boolean [][] matrix_change_to_distance_cells_boolean(boolean adj[][], int v)
	{
		boolean temp [][]=new boolean [v][v];
		
		for(int i=0;i<v;i++)
		{
			for(int j=0;j<v;j++)
			{
				if(adj[i][j])
				{
					for(int z=j;z<v;z++)
					{
						if(z!=j && adj[i][z] && !adj[j][z] && !adj[z][j])
						{
							temp[j][z]=true;
							temp[z][j]=true;
						}	
					}
				}
			}
		}
		
	
		
		return temp;
	}
	
	
	public static void Multilevel_centric (int index) throws InterruptedException, IOException
	{
		long start_time=0;
		start_time=System.nanoTime();
		System.out.println("dddFFFl");
		/*File kk = new File("mattt.txt");
		PrintWriter out = new PrintWriter (kk);*/
		
		
		
		long end_time=0;
		variables.bigraph=true;
		popu=0;
		initing_parallel();
		//int freq [] = new int [(int) variables.v];
		int lin = (int) (Math.random()*variables.links);
		lin=0;
		System.out.println("lin: "+lin);
		numVertices= new int [variables.v];
		
		double vv=variables.v;
		double max_x0=-1000;
		double min_x0=1000;
		double max_y0=-1000;
		double min_y0=1000;
		double dir= (double) Math.PI/vv;
		int lev=0;
		
		level = 1;
		double disp=10.0/vv;
		tol=Math.sqrt(variables.v);
		tol=0.1;
		
		boolean check=false;
		
		//*************************************
		
		int a1=0, a2=0;
		int ini [] = new int [2];
						
		a1= lists[0][lin];
		a2= lists[1][lin];
		
		/*a1= lists.get(lin)[0];
		a2= lists.get(lin)[1];*/
		
		/*a1=matx[0][lin];
		a2=matx[1][lin];*/


		//System.out.println(variables.node_degree[a1]+"  "+variables.node_degree[a2]+"  ");
		ini[0]=a1;
		ini[1]=a2;
		seen_links.add(ini);
		System.out.println(lin+"  "+a1+"   "+a2);
				
		variables.pos[0][a1]= (double)Math.cos((double)0)* 0.025;
		variables.pos[1][a1]= (double)Math.sin((double)0)* 0.025;
		popu++;
		numVertices[a1]=1;
		degree_met[a1]--;
		
		variables.pos[0][a2]= (double)Math.cos((double)1.0)* 0.025;
		variables.pos[1][a2]= (double)Math.sin((double)1.0)* 0.025;
		popu++;
		numVertices[a2]=1;
		degree_met[a2]--;
		
		//k=0.5/popu;
		//k=di/popu;
		
		for(int i=0;i<2;i++)
		{
			if(variables.pos[0][ini[i]]>max_x0)
				max_x0=variables.pos[0][ini[i]];
			if(variables.pos[0][ini[i]]<min_x0)
				min_x0=variables.pos[0][ini[i]];
			
			if(variables.pos[1][ini[i]]>max_y0)
				max_y0=variables.pos[1][ini[i]];
			if(variables.pos[1][ini[i]]<min_y0)
				min_y0=variables.pos[1][ini[i]];
		}
		//*************************************
		//hypotenuse = Math.sqrt(Math.pow(max_x0-min_x0, 2)+Math.pow(max_y0-min_y0, 2));
		hypotenuse = (Math.abs(max_x0-min_x0)+Math.abs(max_y0-min_y0));
		
		
		//*************************
		//*************************
		System.out.println("Starts algorithm parallel: ... ");
		int t=0;
		
		System.out.println(variables.v+ " Vertices and  "+ variables.links+" links  exist!");
		
		//for(t=1;t<variables.time;t++)
		//double di=1.0/Math.sqrt(popu);
		//double	ti = 0.1/Math.sqrt(vv); // DO NOT TOUCH IT :( YOU UNDERSTAND ??????????
		
		double di=0.5;
		double ti=0.1;
		
		//di=1.75;
		
		
		double ti_lev=ti;
		
		double ti_rate=0.9;
		
		double k_rate=0.99;
		
		double roun = Math.round(Math.sqrt(vv));
		double last=0;
		//k=disp;
		//variables.pos=initial_placement ((int) vv,  lists);
		while(!check)
		{	
			
			k = di/((popu));
			ti=ti*ti_rate;
			
			
			force_x = new double [variables.v];
			force_y = new double [variables.v];
			t++;


			energy1 =0;
			forc(t,(int)variables.links,0); /////////////////
			
			
			boolean maxmin=true;
			for(int i=0;i<variables.v;i++)
			{	
				if(numVertices[i]!=0)
				{	
					variables.pos[0][i] =variables.pos[0][i] + (force_x[i]*ti);
					variables.pos[1][i] =variables.pos[1][i] + (force_y[i]*ti);
						
					if(maxmin)
					{
						max_x0=variables.pos[0][i];
						min_x0=variables.pos[0][i];
						max_y0=variables.pos[1][i];
						min_y0=variables.pos[1][i];
						maxmin=false;
					}
					
					
					if(variables.pos[0][i]>max_x0)
						max_x0=variables.pos[0][i];
					if(variables.pos[0][i]<min_x0)
						min_x0=variables.pos[0][i];
					if(variables.pos[1][i]>max_y0)
						max_y0=variables.pos[1][i];
					if(variables.pos[1][i]<min_y0)
						min_y0=variables.pos[1][i];
				}
			}
			//hypotenuse = Math.sqrt(Math.pow(max_x0-min_x0, 2)+Math.pow(max_y0-min_y0, 2));
			hypotenuse = (Math.abs(max_x0-min_x0)+Math.abs(max_y0-min_y0));
			
			/*x_cent=(max_x0+min_x0)/2.0;
			y_cent=(max_y0+min_y0)/2.0;*/


				
				//ti = ti*0.9; // mesh
				//ti = ti*0.99; // sipenski
				//ti= ti*0.999; // small
				//-----------energy checking
				//**********************
				
				
			if((Math.abs(energy1-energy0) < tol*disp && popu==vv) /*last>=roun*/ )
			{
				if(!check)
				{
					System.out.print("  --|"+t+"  "+com+"|--  ");
					check=true;
					end_time=System.nanoTime();
				}
				int_pr=0;
			}
		
			if(Math.abs(energy1-energy0) < tol*disp  /*(t % roun)==0*/)
			{
				di =di*k_rate; // mesh
				
				for(int i=0;i<variables.v;i++)
				{	
					if(numVertices[i]==level)
					{		
						double s=0;
						//double chunk = (Math.PI*2.0)/(double)variables.node_degree[i];
						double chunk = (Math.PI*2.0)/(double)degree_met[i];
						for(int j=0;j<variables.links;j++)
						{
							a1= lists[0][j];
							a2= lists[1][j];
							
							/*a1 = lists.get(j)[0];
							a2 = lists.get(j)[1];*/
							
							/*a1=matx[0][j];
							a2=matx[1][j];*/
							
							
							//chunk = Math.random()*Math.PI*2;
							//disp=Math.random()*(40.0/(double)variables.v);
							if((a1==i && numVertices[a2]==0))
							{
							
								numVertices[a2]=level+1;
								
								variables.pos[0][a2]=variables.pos[0][i]+ (Math.cos(chunk*s)*disp);
								variables.pos[1][a2]=variables.pos[1][i]+ (Math.sin(chunk*s)*disp);								
								s +=1;
								popu++;
								degree_met[a2]--;
							}
							else
								if(a2==i && numVertices[a1]==0)
								{
									
									numVertices[a1]=level+1;
									
									variables.pos[0][a1]=variables.pos[0][i]+ (Math.cos(chunk*s)*disp);
									variables.pos[1][a1]=variables.pos[1][i]+ (Math.sin(chunk*s)*disp);
									s +=1;
									popu++;
									degree_met[a1]--;
								}
						}
					} // if vertice -> level
				}  // for loop
				level++;
				//k=di/Math.sqrt(popu);
				//System.out.println(popu+" "+k+" "+ti+" "+hypotenuse);
				ti = ti_lev;
				//ti_lev = ti_lev - (20.0/vv);
				lev++;
				//tol=tol*1.02;
				int_pr=0;
			}
			int_pr++;
			energy0=energy1;
			//tol = tol*0.9;
			if(popu==vv)
				last++;
			if(check)
				break;
		}
		
		//out.close();
			
		main_run_time += (end_time-start_time);
		
		String temp=""+(main_run_time);
		
		String time_sec="";
		int j=0;
		for(int i=temp.length()-1;i>=0;i--)
		{
			if(j==9)
				time_sec="/"+time_sec;
			time_sec=temp.charAt(i)+time_sec;
			j++;
		}
		
		System.out.println("\nRunning time:  for a graph with:  "+variables.v+"  and links: "+variables.links+" is:   "+(end_time-start_time)+"   "+time_sec);
		dynamics.main_fitting_in_center_parallel();
		dynamics.limit_in_screen_parallel();
		dynamics.covert_to_glortho_parallel(1.0);
	
		visualization.disp();
		
	}
	
	public static void forc(int t, int e, int s)
	{
		
		ch1=Math.sqrt((double) variables.v);
		ch2=ch1*5;
		
		/*ch1=2;
		ch2=ch1*5;*/
		
		/*if(hypotenuse>1.0)
		{
			ch1=ch1*((hypotenuse)*(1/hypotenuse));
			ch2=ch2*((hypotenuse)*(1/hypotenuse));
		}*/
		if(hypotenuse<0.1)
		{
			ch1=ch1*(0.1);
			ch2=ch2*(0.1);
		}
		
		
		for(int j=s;j<e;j++)
		{
			
			int v1 = lists[0][j];
			int v2 = lists[1][j];
			
			/*int v1 = lists.get(j)[0];
			int v2 = lists.get(j)[1];*/
			
			/*int v1=matx[0][j];
			int v2=matx[1][j];*/
			
		
			if(numVertices[v1]!=0 && numVertices[v2]!=0   )
			{
				double rep=0;
				double att=0;
				force=0;
				com++;
				double dis=Math.abs(variables.pos[0][v1]-variables.pos[0][v2])+Math.abs(variables.pos[1][v1]-variables.pos[1][v2]);
				if(dis<0.00000000002)
					dis=0.00000000002;
				double cos=((variables.pos[0][v2]-variables.pos[0][v1])/dis);
				double sin=((variables.pos[1][v2]-variables.pos[1][v1])/dis);
				
						
				rep = ((k*k)/-dis);
				att = dis*dis/k;
			
				/*if(popu==variables.v)
					System.out.println(dis+"  "+rep+" "+att);*/
				
				
				
				force= rep+att;
				
				if(force>0 && force>hypotenuse/ch1)
					force=hypotenuse/ch1;
				if(force<0 && Math.abs(force)>hypotenuse/ch2)
					force=-hypotenuse/ch2;
				
				energy1 +=force*2;
								
				double x_t=cos*force;
				double y_t=sin*force;
				
				force_x[v1]+=x_t;
				force_y[v1]+=y_t;

			
				force_x[v2]-=x_t;
				force_y[v2]-=y_t;
				
				/*force_x[v1]+=cos*force;
				force_y[v1]+=sin*force;

			
				force_x[v2]-=cos*force;
				force_y[v2]-=sin*force;*/
				
								
				//*********replusion for nighbures
			}
		}
		
	/*	for(int i=0;i<variables.v;i++)
		{
			//for(int j=i+1;j<variables.v;j++)
			for(int b=0;b<progress;b++)
			{
				int j= (int) Math.random()*variables.v;
				if(numVertices[i]!=0 && numVertices[j]!=0 && !mat[i][j] && i!=j)
				{
					
					double dis=Math.abs(variables.pos[0][i]-variables.pos[0][j])+Math.abs(variables.pos[1][i]-variables.pos[1][j]);
					double cos=((variables.pos[0][j]-variables.pos[0][i])/dis);
					double sin=((variables.pos[1][j]-variables.pos[1][i])/dis);
					
					double force = (k*k)/(-dis);
					
					if(Math.abs(force)>hypotenuse/1)
						force=-(double) hypotenuse/1;
											
					force_x[i]+=cos*force;
					force_y[i]+=sin*force;
									
					force_x[j]-=cos*force;
					force_y[j]-=sin*force;
											
											
					energy1 += force*2;
				}
			}
		}*/
		
		
	}
	
	static double fitness;
	static int t_dis[][] ;
	static int check [][];
	public static double [][] initial_placement (int v, int [][] list)
	{
		t_dis = new int [v][v];
		
		for(int i=0;i<list[0].length;i++)
		{
			t_dis[list[0][i]][list[1][i]]=1;
			t_dis[list[1][i]][list[0][i]]=1;
		}
		
		t_dis=matrix_change_to_distance_cells(v,t_dis);
		
		int ordering [] = new int [v];
		
		double initial_placement [][] = new double [2][v];
		
		ArrayList <Integer> temp = new ArrayList <Integer>();
		for(int j=0;j<v;j++)
			temp.add(j);
		
		int q=v;
		
		
		for(int i=0;i<v;i++)
		{
			int b=(int) (Math.random()*(q-0));
			ordering[i]=temp.get(b);
			temp.remove(b);
			q--;
		}


		fitness=fitness(variables.v, ordering, t_dis, t_dis);
		double gen =0.1;
		int generation = (int) (v*gen);
		for(int i=generation;i>0;i--)
		{
			double t=(double) i / gen;
			//t=Math.sqrt(v);
			ordering=mutation (v,ordering, t, fitness, t_dis);
			
		}
		
		for(int i=0;i<v;i++)
		{
			initial_placement[0][i]=(1.0/(double) v)*Math.cos(((Math.PI*2.0)/((double) v))* ((double)ordering[i]));
			initial_placement[1][i]=(1.0/(double) v)*Math.sin(((Math.PI*2.0)/((double) v))* ((double)ordering[i]));
		}
		
		return initial_placement;
	}
	
	public static int [] mutation (int v, int [] ordering, double t, double fittt, int adj [][])
	{
		int ordered [] = new int [v];
		
		ordered=ordering.clone();
		t=t/2.0;
		for(int i=0;i<t;i++)
		{
			int k1=(int) (Math.random()*(v-0));
			int k2=(int) (Math.random()*(v-0));
			
			while(k1==k2)
			{
				k1=(int) (Math.random()*(v-0));
				k2=(int) (Math.random()*(v-0));
			}
			 int temp = ordered[k1];
			 ordered[k1]=ordered[k2];
			 ordered[k2]=temp;
			 
			 //*****************
			
			 //*****************
		}
		
		double fit=fitness(variables.v, ordered, t_dis, adj);
		if(fit<fittt)
		{
			fitness=fit;
			//System.out.println(fitness);
			return ordered;
		}
		else
		{
			//System.out.println(fitness);
			return ordering;
		}
	}
	
	
 	public static double fitness(int v, int pos[], int dis [][], int adj [][])
	{
		double fitness=0;
		double chunk = (Math.PI*2)/(double) variables.v;
		
		for(int i=0;i<v;i++)
		{
			for(int j=0;j<v;j++)
			{
				if(i!=j )
				{
					
					double physical =0;
					
					/*if(Math.abs(pos[i]-pos[j])> ((double)(v/2) ))
						physical=v-Math.abs(pos[i]-pos[j]);
					else
						physical=Math.abs(pos[i]-pos[j]);*/
					
					if(dis[i][j]==1)
					{
						if(Math.abs(pos[i]-pos[j])> ((double)(v/2) ))
							physical=v-Math.abs(pos[i]-pos[j]);
						else
							physical=Math.abs(pos[i]-pos[j]);
						
						//physical=Math.abs(pos[i]-pos[j])*chunk;
						
						
						fitness+=Math.abs(  ( chunk)- (physical)  );
					}
					else
					if(dis[i][j]==2)
					{
						if(Math.abs(pos[i]-pos[j])> ((double)(v/2) ))
							physical=v-Math.abs(pos[i]-pos[j]);
						else
							physical=Math.abs(pos[i]-pos[j]);
						
						//physical=Math.abs(pos[i]-pos[j])*chunk;
						
						fitness+=Math.abs(  (1* chunk)- (physical)  );
					}
					else
					{
						if(Math.abs(pos[i]-pos[j])> ((double)(v/2) ))
							physical=v-Math.abs(pos[i]-pos[j]);
						else
							physical=Math.abs(pos[i]-pos[j]);
						//physical=Math.abs(pos[i]-pos[j])*chunk;
						
						if(physical <3* chunk)
							fitness+=1;
					}
					
					
					
					/*if(Math.abs(pos[i]-pos[j])> ((double)(v/2) ))
						physical=v-Math.abs(pos[i]*variables.nodes_centerality[i]-pos[j]*variables.nodes_centerality[j]);
					else
						physical=Math.abs(pos[i]*variables.nodes_centerality[i]-pos[j]*variables.nodes_centerality[j]);*/
					
					
				}
			}
		}
		
		return fitness;
	}

 	
 	static int [][] matrix_change_to_distance_cells( int v , int [][]mat) 
	{
			
			for(int i=0;i<v;i++)
			{			
				for(int j=0;j<v;j++)
				{					
					if(mat[i][j]!=0)
					{
						for(int z=j+1;z<v;z++)
						{						
							if(mat[i][z]!=0 )
							{
								if((mat[j][z]==0  || mat[j][z]>(mat[i][z]+mat[i][j]) ) )
								{
									mat[j][z]=mat[i][z]+mat[i][j];
									mat[z][j]=mat[j][z];
								}
								if(mat[j][z]!=0 && i!=z && (mat[i][z]==0 || mat[i][z]>(mat[j][z]+mat[i][j])))
								{
									mat[i][z]=mat[j][z]+ mat[i][j];
									mat[z][i]=mat[i][z];
								}
							}							
						}
					}					
				}				
			}
			
		//*************
		return mat;
		//*************
		
	}
 	
 	
 	//*******************************************
 	//*********************************
 	//**********************************
 	
}
	
